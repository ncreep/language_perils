<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: state machine | Language Perils]]></title>
  <link href="http://ncreep.github.io/language_perils/blog/categories/state-machine/atom.xml" rel="self"/>
  <link href="http://ncreep.github.io/language_perils/"/>
  <updated>2015-02-25T14:07:28+02:00</updated>
  <id>http://ncreep.github.io/language_perils/</id>
  <author>
    <name><![CDATA[Daniel Beskin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Domain-specific Joy]]></title>
    <link href="http://ncreep.github.io/language_perils/blog/2014-03-20-domain-specific-joy.html"/>
    <updated>2014-03-20T05:10:59+02:00</updated>
    <id>http://ncreep.github.io/language_perils/blog/domain-specific-joy</id>
    <content type="html"><![CDATA[In this post, our goal is to create a domain-specific language (DSL) for the state machine domain that we introduced in the last [post](/blog/2014-03-19-state-of-joy.html). We already had a working example of a state machine (a totally realistic model of a baby), which suffered from being rather verbose and far from cleanly expressing our target domain.

To actually have a language, we need some kind of a syntax for it. In our case, we already have a nice textual representation of the domain, which is the [ASCII table](/blog/2014-03-19-state-of-joy.html#baby-table) format I used to describe the different baby states (funny coincidence how that worked out so comfortably well). This format solves the repetitiveness issues and is definitely close to our domain. 

<!-- more -->

To simplify the thought process, let's have a smaller example of a state machine:

<pre>
  || a | b |
============
1 || b | a |
2 || b | b |
</pre>

This time, we have only two states (`a`, `b`) and two inputs (`1`, `2`), and we do not use the stack for anything. Simple enough for our purposes here.

Now, Joy's syntax, or lack thereof, makes it possible to write this thing as is by just quoting it all into a list:

<pre>
[ || a | b |
============
1 || b | a |
2 || b | b | ]
</pre>

Or how Joy really sees it:

```
[|| a | b | ============ 1 || b | a | 2 | | b | b |]
```


This works because quotes are not checked for invalid identifiers; they only need to contain valid Joy syntax, and that's exactly what we have in our table (which is yet another amazing coincidence). Next, we can try to parse the contents of the quote and convert it into something that is runnable with our state machine runner. But that's not a direction I would actually want to pursue. By doing this, we are not taking any advantage of Joy itself for language representation - we are just using it as a fancy tokenizer for what is essentially plain text. And that's practically an external DSL. I find external DSLs much less interesting than embedded DSLs, as they give us less chances to flex our language's syntax muscles. Let us come up with a proper embedded DSL.

As a first step in this direction, we can remove all the fluff from the table above, and convert it into a plain list of lists:

```
[ [a b] [1 b a] [2 b b] ]
```

This is a valid representation of the data from before, but the grouping is wrong. In the code we wrote in the [previous post](/blog/2014-03-19-state-of-joy.html#baby-states), each state had all its possible inputs grouped around it. What we have here is the opposite. By transposing the table, we get the right grouping:

```
[ [1 2] [a b b] [b a b] ]
```
 Which corresponds to the transposed table:
 
<pre>
  || 1 | 2 |
============
a || b | b |
b || a | b |
</pre>

It's not that complicated to write a transposing function to achieve this transformation, but for simplicity, let us just work with transposed tables to begin with.

Having an abstract way to represent the required data is quite a common thing when creating a DSL. From here, we need to proceed in two directions. The first one is creating some nice syntax for constructing the data. The second is converting the data into something executable.

Before we can proceed with either of those, we still have some aspects of our domain unattended: we don't have a way to do anything on the stack. We'll take the following approach: each cell is going to be implicitly executed on the current stack, so everything we leave there stays on the stack. The last thing on the stack is going to be the next state. We can embellish our simple state machine with some stack actions like so:

<pre>
  ||   1   |    2  |
====================
a ||  0  b | pop b |
b || pop a |  0  b |
</pre>

Now, in the `a` state when the input is `1`, it pushes `0` on the stack and moves to `b`, and when the input is `2`, it pops a value from the stack and also moves to `b`. The `b` state acts analogously. Converting this into our list representation gives us:
```
[ [1 2] [ a [0  b] [pop b] ] [ b [pop a] [0  b] ] ]
```

To group all of its action into a single piece of data, each cell has to be quoted now.

Because we are dealing with a very simple data structure, creating a palatable syntax for it shouldn't be too complicated, so we'll get to it first. Without further ado, here's the syntax:

<pre>
    @     1    |    2    |
[a] : [  0  b ]|[ pop b ]|
[b] : [ pop a ]|[  0  b ]|
</pre>

(the code for the DSL can be found in [state_machine_table_dsl.joy](https://github.com/ncreep/language_perils/blob/master/Joy/state_machine/state_machine_table_dsl.joy))

All of it is completely valid Joy syntax and creates the following list:

```
[[[0 b] [pop a] "b"] [[pop b] [0 b] "a"] [2 1]]
```

Oops, our lists seem to be inverted. No biggie, this is as good a data representation as any other. It just happens to be that it's easier to construct things in reverse when dealing with cons lists. 

Let's delve into our syntax a bit further. The `@` pushes our initial value onto the stack, which is a `[[]]`; all further actions will be adding stuff to this value. The `|` symbol prepends the current thing on the stack to our nested list, e.g.:
```
@ 1 |     # => [ [1] ]
@ 1 | 2 | # => [ [2 1] ]
```

The names of the states are now quoted; otherwise we won't be able to put them on the stack as we are doing while constructing the table (once they are on the stack, they get evaluated, but the state names don't have any meaning, so that just gets us an error, possibly a silent one).

The `:` starts a new row; it converts the preceding symbol into a string and adds it to a new list in our nested list:

```
[[2 1]] [a] :   # => [ ["a"] [2 1] ]
```

Converting the symbol into a string makes it a bit simpler to work with it further down the road. Notice that the references to the state names in the cells remain as is; we'll have to deal with those later.

And that's all there is to it. This syntax is close enough to the ASCII table format we started with, and contains very little noise. This was the easy bit; now we actually have to turn this into something we can execute.

I'll spare you the gory details of the transformation and focus on the more interesting bits. Having obtained our abstract representation, we convert it, using some not too complicated list manipulation code (the beauty of homoiconicity...), into the following construct:
```
[
  ["b" 
    [[
      [[input 2 =] [cur-stack [0 b]   against-stack] i] 
      [[input 1 =] [cur-stack [pop a] against-stack] i]
    ] condn]] 
  ["a" 
    [[
      [[input 2 =] [cur-stack [pop b] against-stack] i] 
      [[input 1 =] [cur-stack [0 b]   against-stack] i]
    ] condn]]
]
```

We can see a strong semblance to the sort of code we were writing to explicitly define a state machine. There are a couple of things to note here. First, we don't have any top-level definitions for the states, everything is contained in a single list. This means that the `a` and `b` references in the code don't have any actual meaning, so we are yet to obtain properly executable code. The second thing to note is what happened to the code inside the cells. Each piece of code got placed in its appropriate execution branch wrapped around in some mysterious incantations. This warrants a closer look.

The last problem that we had with manually constructing state machines is the lack of transparency when dealing with the stack; each function required special wrapping to be run against the stack. The `against-stack` function takes care of this problem. It uses the `infra` combinator (see [manual](http://www.kevinalbrecht.com/code/joy-mirror/html-manual.html)) to run our code against the list we are currently using as our stack. So the code we are executing can treat our artificial stack as a regular Joy stack, hence no special wrapping for the functions that we use in the cells is required. In essence, we've managed to embed Joy itself back into our embedded DSL; that's kind of mind-bendy. When execution is done, `against-stack` takes the result and splits out the next state from the rest of the stack, producing both a new state and a new stack.

The line `[cur-stack [0 b] against-stack] i` can be read as "take the current value of the stack, the code `0 b` and run the code against the stack"; the `i` actually forces this code to be executed when we reach the branch.

To make our list executable, we need to somehow take care of the undefined state references. The first guess would be to just expand each reference with its explicit form as it is presented in the code above. The problem with this approach is that the states are mutually recursive. So the replacement process will go into an infinite loop. We didn't have this problem when manually defining the states, because we used top-level definitions, which can be mutually recursive. But that's not possible in this case, as we can't dynamically add top-level definitions. What we need to do is to somehow delay the evaluation of these references until they are actually needed.

For this purpose, we are going to introduce an execution environment. The environment will contain a map where every entry is a state name with an unexpanded definition of that state, and so every reference to a state can be replaced by a call into the map, fetching the right state. For this to actually work, we first need to do this replacement, yielding:

```
[
  ["b" 
    [[
      [[input 2 =] [cur-stack [0 "b" states-map swap find-in-map]   against-stack] i] 
      [[input 1 =] [cur-stack [pop "a" states-map swap find-in-map] against-stack] i]
    ] condn]] 
  ["a" 
    [[
      [[input 2 =] [cur-stack [pop "b" states-map swap find-in-map] against-stack] i] 
      [[input 1 =] [cur-stack [0 "b" states-map swap find-in-map]   against-stack] i]
    ] condn]]
]
```

The line `"b" states-map swap find-in-map` replaced the state `b`, which is just a fancy way of saying "look for the name `"b"` in the `states-map` variable". The `states-map` variable will be our environment when we execute the state machine, containing the states as they are presented above for its entries.

To run our state machine, we'll write a function called `run-state-from-stack-with-env`, similar to the `run-state-from-stack` we defined before. The main difference is that we now have an additional argument for our environment. To achieve the use of the environment when actually executing the state transition function, we use the `splice-from-map` function that we developed in the [metaprogramming](/blog/2013-05-24-meta-joy.html) post. It performs the appropriate "find and replace" every time we stumble upon a `states-map` reference.

That, essentially, concludes everything we need to define and run our state machines. But there's a minor wrinkle about the process as described above, and that's that in the current scheme of finding and replacing state references we may miss any such references that are hidden in other function definitions. For example, if our state machine was:

```
func == pop a

    @      1   |     2   |
[a] : [  0  b ]|[ pop b ]|
[b] : [  func ]|[  0  b ]|
```

We'd miss the `a` reference hidden inside `func`. To avoid this issue, when constructing the state machine code, we also recursively expand any user-defined symbols with the `expand-user-syms` function. This way, all state references are exposed when we do the "find and replace" routine described above.

Okay, now we are ready to rewrite the baby state machine (the full code is in [baby_state_machine_dsl.joy](https://github.com/ncreep/language_perils/blob/master/Joy/state_machine/baby_state_machine_dsl.joy)):
```
# incrementing/decrementing the number of parent mistakes
wrong == succ
right == pred


# the baby decides whether it needs to call a social worker
should-call-sw == [max-mistakes >=] [call-sw] [wrong crying] ifte

# 'call-sw' stands for "call social worker"

baby == 
          @   "sing-lullaby"   |      "feed"      |    "soothe"    |
 [sleepy] : [  right asleep   ]|[  wrong crying  ]|[ wrong crying ]|
 [hungry] : [  wrong crying   ]|[  right asleep  ]|[ wrong crying ]|
 [asleep] : [  wrong crying   ]|[  wrong crying  ]|[ wrong crying ]|
 [crying] : [ should-call-sw  ]|[ should-call-sw ]|[ right asleep ]|
[call-sw] : [    call-sw      ]|[    call-sw     ]|[   call-sw    ]|
```

Apart from being transposed, this closely follows the table definition of the table state machine, so we don't have the redundancies in the description that we had in the explicit version. As you can see, the stack manipulation functions do not require any special wrapping. Hence we've covered all of our pain points from before.

Because DSLs are all about their visual flare, we can add a bit of garnish to this definition. We define the following no-ops, which can be used as delimiters:
```
, == id
? == id
```

This yields our final version of the state machine:

```
baby == 
          @    "sing-lullaby"   |       "feed"      |    "soothe"     |
 [sleepy] : [  right, asleep   ]|[  wrong, crying  ]|[ wrong, crying ]|
 [hungry] : [  wrong, crying   ]|[  right, asleep  ]|[ wrong, crying ]|
 [asleep] : [  wrong, crying   ]|[  wrong, crying  ]|[ wrong, crying ]|
 [crying] : [ should-call-sw?  ]|[ should-call-sw? ]|[ right, asleep ]|
[call-sw] : [    call-sw       ]|[     call-sw     ]|[    call-sw    ]|
```

Which I find to be slightly more visually pleasing.

We can run the state machine as before:

```
["soothe"] [sleepy] run-baby-table # => [crying]
["soothe" "feed" "sing-lullaby" "feed"] [sleepy] run-baby-table # => [call-sw]
```

I think this can be declared a success, and with an elated feeling of self-satisfaction we can call it quits now.
 
This concludes our excursion into the world of DSLs. As we experienced firsthand, developing a DSL is a lot like developing a real language. We have the actual syntax, we "compile" it into an intermediate representation, then "compile" it further down into executable code. And we even ran it with a non-trivial environment. If that's not your definition of "fun", I don't know what is.

Using Joy for this purpose made the experience very lightweight, the whole definition of the DSL is about 100 lines of code. Minimal syntax and the corresponding homoiconicity make a language very amenable to embedding DSLs into it. I think our little exercise definitely demonstrates this point.

This also concludes my excursion into Joy, in the [next post](/blog/2014-03-24-joy-no-more.html), I'll sum up the experience.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[State of Joy]]></title>
    <link href="http://ncreep.github.io/language_perils/blog/2014-03-19-state-of-joy.html"/>
    <updated>2014-03-19T01:54:19+02:00</updated>
    <id>http://ncreep.github.io/language_perils/blog/state-of-joy</id>
    <content type="html"><![CDATA[Having finished with [binary trees](/blog/2013-04-21-joyous-tree-friends.html) and getting somewhat sidetracked by [metaprogramming](/blog/2013-05-24-meta-joy.html), we are now ready for our next small project. Implementing binary trees was sort of a warm-up for getting used to Joy - now I would like to do something a bit less textbooky. 

As you may recall, Joy has a very flexible syntax due to its homoiconicity (as can be seen in the metaprogramming post). Having a flexible syntax should make a language easily amenable to embedding of [domain-specific languages](http://en.wikipedia.org/wiki/Domain-specific_language) (DSLs). Personally, I'm a big fan of DSLs, so trying to implement one in Joy seems like a nice idea for a small project.

In order to actually have a domain-specific language, we first need to come up with a domain. Having gone through a careful process of examining and comparing various domains (i.e., choosing the first thing that randomly came up in my mind at some distant point in time), I decided to model [state machines](http://en.wikipedia.org/wiki/State_machine). More specifically, I'll be implementing a small language that can describe state machines augmented by a stack, which makes it a [pushdown automaton](http://en.wikipedia.org/wiki/Pushdown_automaton). Adding a stack to our machine seems like a natural idea for a stack-based language and also makes the domain a tad more interesting; we'll see how that works out later on.

<!-- more -->

(For the more pedantically inclined, what we'll implement will actually have access to the whole stack and to the whole of Joy's stack-manipulation power, so strictly speaking it's going to be something more powerful than a pushdown automaton, but we won't linger on that point.)

Before we get to our state machine DSL, we'll write some code that can evaluate state machines, which will give us a better understanding of our domain; let us get to that. 

A state machine is simply a list of states with their corresponding transition functions. The transition functions take the current input and, depending on its value and the current stack, decide what the next state is. In our implementation, a state will be a list pair, where the first item is the value of the state, e.g., its name, and the second is the state transition function. To make this more obvious in the code, we'll define their corresponding accessors:

```
state-value == 0 at # fetch the state value
next-state == 1 at # fetch the transition function
```

(All code for this post can be found in [this folder](https://github.com/ncreep/language_perils/tree/master/Joy/state_machine), the main code for the state machine implementation is in [state_machine.joy](https://github.com/ncreep/language_perils/blob/master/Joy/state_machine/state_machine.joy))

The core part of our state machine evaluation process is this function:

```
# runs a state against an input list: input state stack -> final-state-value
run-state-from-stack == 
  swap # arguments are now: input stack state
  [finish-state-run] [popd popd state-value] [
    [move-first] dip
    next-state i # input [stack value] -> input new-stack new-state
  ] tailrec;
```

It takes a list of inputs, an initial state, and a stack (which is just a list that we'll treat as a stack). It then runs the state machine against the inputs while maintaining the stack in the background. The whole thing works by recursively evaluating the current transition function against the current input and stack; the recursion is made anonymous by using the `tailrec` combinator. Let's break down the definition:

* We swap the arguments to have them in the right order for our recursive step.
* We check whether we are done (i.e., there's no more input) with the `finish-state-run` function.
* If so, we throw out all our arguments and pick out the current state value.
* Otherwise, we pair up our current input (the first item in the input list) and the current stack using the `move-first` function.
* Using the `i` combinator, we evaluate the transition function against the input/stack pair.
* The output of the transition function is the next state; at this point we recurse and start all over.

And that's all we need to evaluate a state machine. To see that it actually works, let's code up a concrete state machine. Apart from actually demonstrating what we've done thus far, this will also be helpful in the design of our DSL. It may so happen that what we already have is close enough to our domain, and we won't have a need for a special language. That being very unlikely, at the very least we may get some pointers to what aspects of our syntax we should optimize to get closer to the domain.

*(cue the narrator)*

>Family is important, and as programmers, we should strive to help other programmers deal with realistic scenarios that come up in family life. In this installment of our "Family for Geeks", we'll see how to deal with babies.

*(fading out with happy jingle music)*

So, we'll implement a state machine that totally realistically models the behavior of a typical baby. Our baby has a number of possible states: sleepy, hungry, asleep, and crying. Obviously, the last one is the most common. Our main goal is to choose the right action to get the baby to fall asleep. We have a number of actions that we can do with the baby; these are the inputs to the state machine: sing a lullaby, feed, and soothe. To make this more realistic, our baby is going to ~~be vindictive~~ have a memory. The baby is going to keep count for every time we mess up and choose a wrong action. Once we've messed up too many times, the baby is going to call a social worker. Calling a social worker will be counted as yet another state of a baby. Here is our baby's behavior described by a table:

<pre id="baby-table">
             || sleepy | hungry | asleep |          crying            | call social worker |
============================================================================================
sing lullaby || asleep | crying | crying | should call social worker? | call social worker |
        feed || crying | asleep | crying | should call social worker? | call social worker |
      soothe || crying | crying | crying |          asleep            | call social worker |
</pre>

The header row contains the possible states of the baby; the first column has the possible actions. For every state/action pair, we choose the baby's next state. Getting the baby into the crying state is considered wrong, and we'll use the stack to keep track of the number of wrongs. If we get the baby into the asleep state, we get to decrement our wrongs count. Once the baby is in the crying state, we check whether the baby was wronged too many times ("should call social worker?"). If so, we move to the call social worker state (which is pretty much game over in this state machine). Otherwise, we keep on crying.

This sums up the behavior of a typical baby in a completely life-like fashion. Now, we can try and write it down as real code (which can be found in [baby_state_machine.joy](https://github.com/ncreep/language_perils/blob/master/Joy/state_machine/baby_state_machine.joy)):

<div id="baby-states">
```
sleepy == ["sleepy" [[
  [["sing-lullaby" input-is] right asleep]
  [["feed" input-is] wrong crying]
  [["soothe" input-is] wrong crying]
] condn]];
  
hungry == ["hungry" [[
  [["sing-lullaby" input-is] wrong crying]
  [["feed" input-is] right asleep]
  [["soothe" input-is] wrong crying]
] condn]];
  
asleep == ["asleep" [[
  [["sing-lullaby" input-is] wrong crying]
  [["feed" input-is] wrong crying]
  [["soothe" input-is] wrong crying]
] condn]];
  
crying == ["crying" [[
  [["sing-lullaby" input-is] should-call-social-worker]
  [["feed" input-is] should-call-social-worker]
  [["soothe" input-is] right asleep]
] condn]];

call-social-worker == ["call-social-worker" [cur-stack call-social-worker]];
```
</div>

Well, that sucked... If you squint hard enough, you may recognize our state machine from before, but there's a whole lot of noise obscuring it from us. 

As you can see, every state gets its own top-level definition. The first bit of the state is just its name as a string. Next comes the state transition function in the form of a conditional `condn`, which is just like the built-in `cond` (which acts like a multi-branch `if` expression) but does not require a default case. Every line corresponds to one possible input. The `input-is` function checks the current input against the string; if it matches, we execute the following code. Because our input is part of an input/stack pair, the `input-is` function has to break it down to fetch out the input from the pair and only then compare it to the input in the current branch. 

The code that we execute after choosing a branch works against the input/stack pair and must produce a new stack value and a new state as a result. In most cases, we need to decide whether the action is wrong or right and increment/decrement the stack, then we choose the next state. For this purpose, we use one of either `wrong` or `right`:
```
wrong == [succ] on-stack;
right == [pred] on-stack;

# [stack value] func -> new-stack
on-stack  == swap cur-stack uncons [swap i] dip cons;
```

The `on-stack` combinator takes a piece of code and executes it against the top value of the current stack. It takes care of splitting out the stack from the input/stack pair (using `cur-stack`) and applying a function to its top value. The `wrong` and `right` functions just pass the `succ` (increment) or `pred` (decrement) to the `on-stack` combinator to achieve the required effect.

For example, the line `[["feed" input-is] wrong crying]` checks whether the input is `feed`; if so, the action was wrong, and we increment the counter and move on to the `crying` state.

In the case where we need to check whether a social worker should be called, we invoke `should-call-social-worker`:
```
should-call-social-worker == 
  [cur-stack first max-mistakes >=] 
  [cur-stack call-social-worker] 
  [wrong crying] ifte
```

This checks whether the counter on the top of the stack went past our mistake limit; if so, it leaves the stack as is (`cur-stack`) and chooses the `call-social-worker` state. Otherwise, we invoke the `wrong` function and stay in the `crying` state.

The `call-social-worker` state is trivial and just keeps the stack as is, without moving to another state.

We can now spot some patterns of repetitiveness that, hopefully, our DSL will be able to eradicate. Firstly, we are repeating our state names both as their definition name and their string name in the state value. Secondly, the list of possible inputs is repeated in almost all of the states. Lastly, manipulating the stack is rather explicit; every function we want to invoke on the stack has to be wrapped in an `on-stack` combinator, and even if we don't need anything on the stack at all, we still have to mention it with the `cur-stack` function. You'd expect to be able to achieve something more transparent than that from a stack-based language.

All that aside, we can actually execute our state machine with the following code:

```
["soothe"] sleepy run-baby-state # => "crying"
["soothe" "feed" "sing-lullaby" "feed"] sleepy run-baby-state # => "call-social-worker"
```

The first argument is the input list, the second is the state we start from.  
So at least it works as expected.

This concludes the exposition of the domain, in the next [installment](/blog/2014-03-20-domain-specific-joy.html) we'll try to come up with an actual language specific to it.]]></content>
  </entry>
  
</feed>
