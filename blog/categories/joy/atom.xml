<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Joy | Language Perils]]></title>
  <link href="http://ncreep.github.io/language_perils/blog/categories/joy/atom.xml" rel="self"/>
  <link href="http://ncreep.github.io/language_perils/"/>
  <updated>2015-02-25T04:16:12+02:00</updated>
  <id>http://ncreep.github.io/language_perils/</id>
  <author>
    <name><![CDATA[Daniel Beskin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Joy No More]]></title>
    <link href="http://ncreep.github.io/language_perils/blog/2014-03-24-joy-no-more.html"/>
    <updated>2014-03-24T03:46:15+02:00</updated>
    <id>http://ncreep.github.io/language_perils/blog/joy-no-more</id>
    <content type="html"><![CDATA[I've reached the end of my Joy escapade. I can definitely say that I had a great time (notice how I avoided one of my well-trodden puns here) figuring out this nifty little language.

<!-- more -->

Joy is a demonstration of how far a powerful and clean idea can take you. Being a (sadly) abandoned research language, it's definitely not as polished as some other industrial-grade alternatives, say, [Factor](http://factorcode.org/), but its elegance cannot be disputed. It's a real eye opener to see how easily concatenative code can be reasoned about by just breaking it down in an arbitrary place, and expanding any non-obvious expressions, then rinsing and repeating, until you figure out whatever requires figuring out. It takes time to get used to the (theoretically optional) stack, and I can't really say it grows on you, at least not within the short period of time I've been exposed to it. But once you get your handle on it and reach the right level of abstraction for your domain, it kind of fades more into the background.

On the other side of the feature-set spectrum, there is the power of homoiconicity and quoting, which was plentifully used and abused in all of the Joy posts, but especially in the [metaprogramming post](/blog/2013-05-24-meta-joy.html) (partially undermining the ease of reasoning point above). These minimal features give you plenty of rope to hang yourself, but the flexibility you gain is way more than worth it. The experience of [writing a DSL](/blog/2014-03-20-domain-specific-joy.html) in Joy is one proof of that.

Joy does have its warts, mostly due to its lack of proper tooling; debugging non-trivial code without even line numbers for the errors and with possible bugs in the interpreter is not a great source of joy (see what I did there? Couldn't help it). But you get over it, and the relative ease of reasoning, at least up to the point when you go too meta, alleviates some of the pain.

Nonetheless, I still recommend learning Joy for both fun and profit (not in the monetary sense, we're all idealists here...); it's a very enlightening experience for a very small entrance fee. Maybe in the future I'll get myself into some more concatenative programming, there's plenty more to dig into. I already mentioned Factor as a more feature-complete alternative. But being more inclined towards static typing, the [Cat](http://www.cat-language.com/) programming language looks like an appealing option.

Anyways, that's all I have to say about Joy in this series; it's time to choose my next language.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Domain-specific Joy]]></title>
    <link href="http://ncreep.github.io/language_perils/blog/2014-03-20-domain-specific-joy.html"/>
    <updated>2014-03-20T05:10:59+02:00</updated>
    <id>http://ncreep.github.io/language_perils/blog/domain-specific-joy</id>
    <content type="html"><![CDATA[In this post, our goal is to create a domain-specific language (DSL) for the state machine domain that we introduced in the last [post](/blog/2014-03-19-state-of-joy.html). We already had a working example of a state machine (a totally realistic model of a baby), which suffered from being rather verbose and far from cleanly expressing our target domain.

To actually have a language, we need some kind of a syntax for it. In our case, we already have a nice textual representation of the domain, which is the [ASCII table](/blog/2014-03-19-state-of-joy.html#baby-table) format I used to describe the different baby states (funny coincidence how that worked out so comfortably well). This format solves the repetitiveness issues and is definitely close to our domain. 

<!-- more -->

To simplify the thought process, let's have a smaller example of a state machine:

<pre>
  || a | b |
============
1 || b | a |
2 || b | b |
</pre>

This time, we have only two states (`a`, `b`) and two inputs (`1`, `2`), and we do not use the stack for anything. Simple enough for our purposes here.

Now, Joy's syntax, or lack thereof, makes it possible to write this thing as is by just quoting it all into a list:

<pre>
[ || a | b |
============
1 || b | a |
2 || b | b | ]
</pre>

Or how Joy really sees it:

```
[|| a | b | ============ 1 || b | a | 2 | | b | b |]
```


This works because quotes are not checked for invalid identifiers; they only need to contain valid Joy syntax, and that's exactly what we have in our table (which is yet another amazing coincidence). Next, we can try to parse the contents of the quote and convert it into something that is runnable with our state machine runner. But that's not a direction I would actually want to pursue. By doing this, we are not taking any advantage of Joy itself for language representation - we are just using it as a fancy tokenizer for what is essentially plain text. And that's practically an external DSL. I find external DSLs much less interesting than embedded DSLs, as they give us less chances to flex our language's syntax muscles. Let us come up with a proper embedded DSL.

As a first step in this direction, we can remove all the fluff from the table above, and convert it into a plain list of lists:

```
[ [a b] [1 b a] [2 b b] ]
```

This is a valid representation of the data from before, but the grouping is wrong. In the code we wrote in the [previous post](/blog/2014-03-19-state-of-joy.html#baby-states), each state had all its possible inputs grouped around it. What we have here is the opposite. By transposing the table, we get the right grouping:

```
[ [1 2] [a b b] [b a b] ]
```
 Which corresponds to the transposed table:
 
<pre>
  || 1 | 2 |
============
a || b | b |
b || a | b |
</pre>

It's not that complicated to write a transposing function to achieve this transformation, but for simplicity, let us just work with transposed tables to begin with.

Having an abstract way to represent the required data is quite a common thing when creating a DSL. From here, we need to proceed in two directions. The first one is creating some nice syntax for constructing the data. The second is converting the data into something executable.

Before we can proceed with either of those, we still have some aspects of our domain unattended: we don't have a way to do anything on the stack. We'll take the following approach: each cell is going to be implicitly executed on the current stack, so everything we leave there stays on the stack. The last thing on the stack is going to be the next state. We can embellish our simple state machine with some stack actions like so:

<pre>
  ||   1   |    2  |
====================
a ||  0  b | pop b |
b || pop a |  0  b |
</pre>

Now, in the `a` state when the input is `1`, it pushes `0` on the stack and moves to `b`, and when the input is `2`, it pops a value from the stack and also moves to `b`. The `b` state acts analogously. Converting this into our list representation gives us:
```
[ [1 2] [ a [0  b] [pop b] ] [ b [pop a] [0  b] ] ]
```

To group all of its action into a single piece of data, each cell has to be quoted now.

Because we are dealing with a very simple data structure, creating a palatable syntax for it shouldn't be too complicated, so we'll get to it first. Without further ado, here's the syntax:

<pre>
    @     1    |    2    |
[a] : [  0  b ]|[ pop b ]|
[b] : [ pop a ]|[  0  b ]|
</pre>

(the code for the DSL can be found in [state_machine_table_dsl.joy](https://github.com/ncreep/language_perils/blob/master/Joy/state_machine/state_machine_table_dsl.joy))

All of it is completely valid Joy syntax and creates the following list:

```
[[[0 b] [pop a] "b"] [[pop b] [0 b] "a"] [2 1]]
```

Oops, our lists seem to be inverted. No biggie, this is as good a data representation as any other. It just happens to be that it's easier to construct things in reverse when dealing with cons lists. 

Let's delve into our syntax a bit further. The `@` pushes our initial value onto the stack, which is a `[[]]`; all further actions will be adding stuff to this value. The `|` symbol prepends the current thing on the stack to our nested list, e.g.:
```
@ 1 |     # => [ [1] ]
@ 1 | 2 | # => [ [2 1] ]
```

The names of the states are now quoted; otherwise we won't be able to put them on the stack as we are doing while constructing the table (once they are on the stack, they get evaluated, but the state names don't have any meaning, so that just gets us an error, possibly a silent one).

The `:` starts a new row; it converts the preceding symbol into a string and adds it to a new list in our nested list:

```
[[2 1]] [a] :   # => [ ["a"] [2 1] ]
```

Converting the symbol into a string makes it a bit simpler to work with it further down the road. Notice that the references to the state names in the cells remain as is; we'll have to deal with those later.

And that's all there is to it. This syntax is close enough to the ASCII table format we started with, and contains very little noise. This was the easy bit; now we actually have to turn this into something we can execute.

I'll spare you the gory details of the transformation and focus on the more interesting bits. Having obtained our abstract representation, we convert it, using some not too complicated list manipulation code (the beauty of homoiconicity...), into the following construct:
```
[
  ["b" 
    [[
      [[input 2 =] [cur-stack [0 b]   against-stack] i] 
      [[input 1 =] [cur-stack [pop a] against-stack] i]
    ] condn]] 
  ["a" 
    [[
      [[input 2 =] [cur-stack [pop b] against-stack] i] 
      [[input 1 =] [cur-stack [0 b]   against-stack] i]
    ] condn]]
]
```

We can see a strong semblance to the sort of code we were writing to explicitly define a state machine. There are a couple of things to note here. First, we don't have any top-level definitions for the states, everything is contained in a single list. This means that the `a` and `b` references in the code don't have any actual meaning, so we are yet to obtain properly executable code. The second thing to note is what happened to the code inside the cells. Each piece of code got placed in its appropriate execution branch wrapped around in some mysterious incantations. This warrants a closer look.

The last problem that we had with manually constructing state machines is the lack of transparency when dealing with the stack; each function required special wrapping to be run against the stack. The `against-stack` function takes care of this problem. It uses the `infra` combinator (see [manual](http://www.kevinalbrecht.com/code/joy-mirror/html-manual.html)) to run our code against the list we are currently using as our stack. So the code we are executing can treat our artificial stack as a regular Joy stack, hence no special wrapping for the functions that we use in the cells is required. In essence, we've managed to embed Joy itself back into our embedded DSL; that's kind of mind-bendy. When execution is done, `against-stack` takes the result and splits out the next state from the rest of the stack, producing both a new state and a new stack.

The line `[cur-stack [0 b] against-stack] i` can be read as "take the current value of the stack, the code `0 b` and run the code against the stack"; the `i` actually forces this code to be executed when we reach the branch.

To make our list executable, we need to somehow take care of the undefined state references. The first guess would be to just expand each reference with its explicit form as it is presented in the code above. The problem with this approach is that the states are mutually recursive. So the replacement process will go into an infinite loop. We didn't have this problem when manually defining the states, because we used top-level definitions, which can be mutually recursive. But that's not possible in this case, as we can't dynamically add top-level definitions. What we need to do is to somehow delay the evaluation of these references until they are actually needed.

For this purpose, we are going to introduce an execution environment. The environment will contain a map where every entry is a state name with an unexpanded definition of that state, and so every reference to a state can be replaced by a call into the map, fetching the right state. For this to actually work, we first need to do this replacement, yielding:

```
[
  ["b" 
    [[
      [[input 2 =] [cur-stack [0 "b" states-map swap find-in-map]   against-stack] i] 
      [[input 1 =] [cur-stack [pop "a" states-map swap find-in-map] against-stack] i]
    ] condn]] 
  ["a" 
    [[
      [[input 2 =] [cur-stack [pop "b" states-map swap find-in-map] against-stack] i] 
      [[input 1 =] [cur-stack [0 "b" states-map swap find-in-map]   against-stack] i]
    ] condn]]
]
```

The line `"b" states-map swap find-in-map` replaced the state `b`, which is just a fancy way of saying "look for the name `"b"` in the `states-map` variable". The `states-map` variable will be our environment when we execute the state machine, containing the states as they are presented above for its entries.

To run our state machine, we'll write a function called `run-state-from-stack-with-env`, similar to the `run-state-from-stack` we defined before. The main difference is that we now have an additional argument for our environment. To achieve the use of the environment when actually executing the state transition function, we use the `splice-from-map` function that we developed in the [metaprogramming](/blog/2013-05-24-meta-joy.html) post. It performs the appropriate "find and replace" every time we stumble upon a `states-map` reference.

That, essentially, concludes everything we need to define and run our state machines. But there's a minor wrinkle about the process as described above, and that's that in the current scheme of finding and replacing state references we may miss any such references that are hidden in other function definitions. For example, if our state machine was:

```
func == pop a

    @      1   |     2   |
[a] : [  0  b ]|[ pop b ]|
[b] : [  func ]|[  0  b ]|
```

We'd miss the `a` reference hidden inside `func`. To avoid this issue, when constructing the state machine code, we also recursively expand any user-defined symbols with the `expand-user-syms` function. This way, all state references are exposed when we do the "find and replace" routine described above.

Okay, now we are ready to rewrite the baby state machine (the full code is in [baby_state_machine_dsl.joy](https://github.com/ncreep/language_perils/blob/master/Joy/state_machine/baby_state_machine_dsl.joy)):
```
# incrementing/decrementing the number of parent mistakes
wrong == succ
right == pred


# the baby decides whether it needs to call a social worker
should-call-sw == [max-mistakes >=] [call-sw] [wrong crying] ifte

# 'call-sw' stands for "call social worker"

baby == 
          @   "sing-lullaby"   |      "feed"      |    "soothe"    |
 [sleepy] : [  right asleep   ]|[  wrong crying  ]|[ wrong crying ]|
 [hungry] : [  wrong crying   ]|[  right asleep  ]|[ wrong crying ]|
 [asleep] : [  wrong crying   ]|[  wrong crying  ]|[ wrong crying ]|
 [crying] : [ should-call-sw  ]|[ should-call-sw ]|[ right asleep ]|
[call-sw] : [    call-sw      ]|[    call-sw     ]|[   call-sw    ]|
```

Apart from being transposed, this closely follows the table definition of the table state machine, so we don't have the redundancies in the description that we had in the explicit version. As you can see, the stack manipulation functions do not require any special wrapping. Hence we've covered all of our pain points from before.

Because DSLs are all about their visual flare, we can add a bit of garnish to this definition. We define the following no-ops, which can be used as delimiters:
```
, == id
? == id
```

This yields our final version of the state machine:

```
baby == 
          @    "sing-lullaby"   |       "feed"      |    "soothe"     |
 [sleepy] : [  right, asleep   ]|[  wrong, crying  ]|[ wrong, crying ]|
 [hungry] : [  wrong, crying   ]|[  right, asleep  ]|[ wrong, crying ]|
 [asleep] : [  wrong, crying   ]|[  wrong, crying  ]|[ wrong, crying ]|
 [crying] : [ should-call-sw?  ]|[ should-call-sw? ]|[ right, asleep ]|
[call-sw] : [    call-sw       ]|[     call-sw     ]|[    call-sw    ]|
```

Which I find to be slightly more visually pleasing.

We can run the state machine as before:

```
["soothe"] [sleepy] run-baby-table # => [crying]
["soothe" "feed" "sing-lullaby" "feed"] [sleepy] run-baby-table # => [call-sw]
```

I think this can be declared a success, and with an elated feeling of self-satisfaction we can call it quits now.
 
This concludes our excursion into the world of DSLs. As we experienced firsthand, developing a DSL is a lot like developing a real language. We have the actual syntax, we "compile" it into an intermediate representation, then "compile" it further down into executable code. And we even ran it with a non-trivial environment. If that's not your definition of "fun", I don't know what is.

Using Joy for this purpose made the experience very lightweight, the whole definition of the DSL is about 100 lines of code. Minimal syntax and the corresponding homoiconicity make a language very amenable to embedding DSLs into it. I think our little exercise definitely demonstrates this point.

This also concludes my excursion into Joy, in the [next post](/blog/2014-03-24-joy-no-more.html), I'll sum up the experience.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[State of Joy]]></title>
    <link href="http://ncreep.github.io/language_perils/blog/2014-03-19-state-of-joy.html"/>
    <updated>2014-03-19T01:54:19+02:00</updated>
    <id>http://ncreep.github.io/language_perils/blog/state-of-joy</id>
    <content type="html"><![CDATA[Having finished with [binary trees](/blog/2013-04-21-joyous-tree-friends.html) and getting somewhat sidetracked by [metaprogramming](/blog/2013-05-24-meta-joy.html), we are now ready for our next small project. Implementing binary trees was sort of a warm-up for getting used to Joy - now I would like to do something a bit less textbooky. 

As you may recall, Joy has a very flexible syntax due to its homoiconicity (as can be seen in the metaprogramming post). Having a flexible syntax should make a language easily amenable to embedding of [domain-specific languages](http://en.wikipedia.org/wiki/Domain-specific_language) (DSLs). Personally, I'm a big fan of DSLs, so trying to implement one in Joy seems like a nice idea for a small project.

In order to actually have a domain-specific language, we first need to come up with a domain. Having gone through a careful process of examining and comparing various domains (i.e., choosing the first thing that randomly came up in my mind at some distant point in time), I decided to model [state machines](http://en.wikipedia.org/wiki/State_machine). More specifically, I'll be implementing a small language that can describe state machines augmented by a stack, which makes it a [pushdown automaton](http://en.wikipedia.org/wiki/Pushdown_automaton). Adding a stack to our machine seems like a natural idea for a stack-based language and also makes the domain a tad more interesting; we'll see how that works out later on.

<!-- more -->

(For the more pedantically inclined, what we'll implement will actually have access to the whole stack and to the whole of Joy's stack-manipulation power, so strictly speaking it's going to be something more powerful than a pushdown automaton, but we won't linger on that point.)

Before we get to our state machine DSL, we'll write some code that can evaluate state machines, which will give us a better understanding of our domain; let us get to that. 

A state machine is simply a list of states with their corresponding transition functions. The transition functions take the current input and, depending on its value and the current stack, decide what the next state is. In our implementation, a state will be a list pair, where the first item is the value of the state, e.g., its name, and the second is the state transition function. To make this more obvious in the code, we'll define their corresponding accessors:

```
state-value == 0 at # fetch the state value
next-state == 1 at # fetch the transition function
```

(All code for this post can be found in [this folder](https://github.com/ncreep/language_perils/tree/master/Joy/state_machine), the main code for the state machine implementation is in [state_machine.joy](https://github.com/ncreep/language_perils/blob/master/Joy/state_machine/state_machine.joy))

The core part of our state machine evaluation process is this function:

```
# runs a state against an input list: input state stack -> final-state-value
run-state-from-stack == 
  swap # arguments are now: input stack state
  [finish-state-run] [popd popd state-value] [
    [move-first] dip
    next-state i # input [stack value] -> input new-stack new-state
  ] tailrec;
```

It takes a list of inputs, an initial state, and a stack (which is just a list that we'll treat as a stack). It then runs the state machine against the inputs while maintaining the stack in the background. The whole thing works by recursively evaluating the current transition function against the current input and stack; the recursion is made anonymous by using the `tailrec` combinator. Let's break down the definition:

* We swap the arguments to have them in the right order for our recursive step.
* We check whether we are done (i.e., there's no more input) with the `finish-state-run` function.
* If so, we throw out all our arguments and pick out the current state value.
* Otherwise, we pair up our current input (the first item in the input list) and the current stack using the `move-first` function.
* Using the `i` combinator, we evaluate the transition function against the input/stack pair.
* The output of the transition function is the next state; at this point we recurse and start all over.

And that's all we need to evaluate a state machine. To see that it actually works, let's code up a concrete state machine. Apart from actually demonstrating what we've done thus far, this will also be helpful in the design of our DSL. It may so happen that what we already have is close enough to our domain, and we won't have a need for a special language. That being very unlikely, at the very least we may get some pointers to what aspects of our syntax we should optimize to get closer to the domain.

*(cue the narrator)*

>Family is important, and as programmers, we should strive to help other programmers deal with realistic scenarios that come up in family life. In this installment of our "Family for Geeks", we'll see how to deal with babies.

*(fading out with happy jingle music)*

So, we'll implement a state machine that totally realistically models the behavior of a typical baby. Our baby has a number of possible states: sleepy, hungry, asleep, and crying. Obviously, the last one is the most common. Our main goal is to choose the right action to get the baby to fall asleep. We have a number of actions that we can do with the baby; these are the inputs to the state machine: sing a lullaby, feed, and soothe. To make this more realistic, our baby is going to ~~be vindictive~~ have a memory. The baby is going to keep count for every time we mess up and choose a wrong action. Once we've messed up too many times, the baby is going to call a social worker. Calling a social worker will be counted as yet another state of a baby. Here is our baby's behavior described by a table:

<pre id="baby-table">
             || sleepy | hungry | asleep |          crying            | call social worker |
============================================================================================
sing lullaby || asleep | crying | crying | should call social worker? | call social worker |
        feed || crying | asleep | crying | should call social worker? | call social worker |
      soothe || crying | crying | crying |          asleep            | call social worker |
</pre>

The header row contains the possible states of the baby; the first column has the possible actions. For every state/action pair, we choose the baby's next state. Getting the baby into the crying state is considered wrong, and we'll use the stack to keep track of the number of wrongs. If we get the baby into the asleep state, we get to decrement our wrongs count. Once the baby is in the crying state, we check whether the baby was wronged too many times ("should call social worker?"). If so, we move to the call social worker state (which is pretty much game over in this state machine). Otherwise, we keep on crying.

This sums up the behavior of a typical baby in a completely life-like fashion. Now, we can try and write it down as real code (which can be found in [baby_state_machine.joy](https://github.com/ncreep/language_perils/blob/master/Joy/state_machine/baby_state_machine.joy)):

<div id="baby-states">
```
sleepy == ["sleepy" [[
  [["sing-lullaby" input-is] right asleep]
  [["feed" input-is] wrong crying]
  [["soothe" input-is] wrong crying]
] condn]];
  
hungry == ["hungry" [[
  [["sing-lullaby" input-is] wrong crying]
  [["feed" input-is] right asleep]
  [["soothe" input-is] wrong crying]
] condn]];
  
asleep == ["asleep" [[
  [["sing-lullaby" input-is] wrong crying]
  [["feed" input-is] wrong crying]
  [["soothe" input-is] wrong crying]
] condn]];
  
crying == ["crying" [[
  [["sing-lullaby" input-is] should-call-social-worker]
  [["feed" input-is] should-call-social-worker]
  [["soothe" input-is] right asleep]
] condn]];

call-social-worker == ["call-social-worker" [cur-stack call-social-worker]];
```
</div>

Well, that sucked... If you squint hard enough, you may recognize our state machine from before, but there's a whole lot of noise obscuring it from us. 

As you can see, every state gets its own top-level definition. The first bit of the state is just its name as a string. Next comes the state transition function in the form of a conditional `condn`, which is just like the built-in `cond` (which acts like a multi-branch `if` expression) but does not require a default case. Every line corresponds to one possible input. The `input-is` function checks the current input against the string; if it matches, we execute the following code. Because our input is part of an input/stack pair, the `input-is` function has to break it down to fetch out the input from the pair and only then compare it to the input in the current branch. 

The code that we execute after choosing a branch works against the input/stack pair and must produce a new stack value and a new state as a result. In most cases, we need to decide whether the action is wrong or right and increment/decrement the stack, then we choose the next state. For this purpose, we use one of either `wrong` or `right`:
```
wrong == [succ] on-stack;
right == [pred] on-stack;

# [stack value] func -> new-stack
on-stack  == swap cur-stack uncons [swap i] dip cons;
```

The `on-stack` combinator takes a piece of code and executes it against the top value of the current stack. It takes care of splitting out the stack from the input/stack pair (using `cur-stack`) and applying a function to its top value. The `wrong` and `right` functions just pass the `succ` (increment) or `pred` (decrement) to the `on-stack` combinator to achieve the required effect.

For example, the line `[["feed" input-is] wrong crying]` checks whether the input is `feed`; if so, the action was wrong, and we increment the counter and move on to the `crying` state.

In the case where we need to check whether a social worker should be called, we invoke `should-call-social-worker`:
```
should-call-social-worker == 
  [cur-stack first max-mistakes >=] 
  [cur-stack call-social-worker] 
  [wrong crying] ifte
```

This checks whether the counter on the top of the stack went past our mistake limit; if so, it leaves the stack as is (`cur-stack`) and chooses the `call-social-worker` state. Otherwise, we invoke the `wrong` function and stay in the `crying` state.

The `call-social-worker` state is trivial and just keeps the stack as is, without moving to another state.

We can now spot some patterns of repetitiveness that, hopefully, our DSL will be able to eradicate. Firstly, we are repeating our state names both as their definition name and their string name in the state value. Secondly, the list of possible inputs is repeated in almost all of the states. Lastly, manipulating the stack is rather explicit; every function we want to invoke on the stack has to be wrapped in an `on-stack` combinator, and even if we don't need anything on the stack at all, we still have to mention it with the `cur-stack` function. You'd expect to be able to achieve something more transparent than that from a stack-based language.

All that aside, we can actually execute our state machine with the following code:

```
["soothe"] sleepy run-baby-state # => "crying"
["soothe" "feed" "sing-lullaby" "feed"] sleepy run-baby-state # => "call-social-worker"
```

The first argument is the input list, the second is the state we start from.  
So at least it works as expected.

This concludes the exposition of the domain, in the next [installment](/blog/2014-03-20-domain-specific-joy.html) we'll try to come up with an actual language specific to it.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meta-Joy]]></title>
    <link href="http://ncreep.github.io/language_perils/blog/2013-05-24-meta-joy.html"/>
    <updated>2013-05-24T14:34:00+03:00</updated>
    <id>http://ncreep.github.io/language_perils/blog/meta-joy</id>
    <content type="html"><![CDATA[In the [previous post](/blog/2013-04-21-joyous-tree-friends.html) I was struggling with the noise generated in my code by stack manipulation-related functions. Having reached a dead end, I promised you a shiny new direction, which I'll be introducing in this post.

To do that, we'll have to recap one of the Joy basics, namely, its homoiconicity. In the [introduction](/blog/2013-03-18-the-joy-of-joy.html), I mentioned how Joy's list primitive is actually a quoted program; this should be familiar if you're acquainted with Lisp lists. So... we can easily go meta on the language by employing list manipulation. Here's a simple example to illustrate the point:
```
[1 2] [+] concat i # => 3
```

<!-- more -->

(`i` evaluates the list as a program)

As a real program may be an arbitrarily nested list, manipulating it won't be that simple. Say I want to turn this piece of code `[1 [2 3 +] *]` into `[1 [2 3 *] *]`. I can do this manually like so:
```
[1 [2 3 +] *] dup
1 at         # => [2 3 +]
2 take       # => [2 3]
[*] concat   # => [2 3 *]
1 insert-at. # => [1 [2 3 *] *]
```
(which assumes the availability of the `insert-at` function we were messing about with the last time)

And obviously, this approach is too clumsy to scale up to any real use case. What we need is some generic way to find and replace bits of lists with other bits. To do this, I'll introduce yet another step in the meta direction. In the standard library, we have the `name` function, which takes a symbol, e.g. a non-literal item in a list, and returns its name as a string, like so:
```
[foo bar baz] [name] map # => ["foo" "bar" "baz"]
```

Armed with this function, we can treat quoted programs as lists of strings, and do any sort of string manipulation we may want with it (we also have the inverse of `name` - `intern`, which takes a string and returns a symbol). And how is this useful in our quest for list manipulation nirvana? It means that we can treat finding and replacing of program parts as finding and replacing (splicing) strings in a list, and that's a rather down-to-earth non-meta operation.

Inspired by Lisp macros, I decided to implement a splicing scheme illustrated by this example:
```
["two" "four" "five"] [[1 ~0 3] [~1 ~2] concat] splice-from-list # => [[1 "two" 3] ["four" "five"] concat]
```

The first list is the argument list and the second is the target program skeleton. Each `~X` symbol is treated as an index `X` in the argument list. Upon application of the `splice-from-list` function, each occurrence of the `~X` pattern is replaced by the corresponding item in the argument list.

The code for the implementation is in the [repository](https://github.com/ncreep/language_perils) in the [meta.joy](https://github.com/ncreep/language_perils/blob/master/Joy/meta_joy/meta.joy) file; let's look at it:
```
splice-from-list == [ 
	[is-num-splice-pattern] 
	[splice-to-num at] 
	[]
	ifte
] treemap popd;
```

The function `treemap` does most of the heavy lifting. `treemap` takes a tree (which is an arbitrarily nested list where each non-list value is treated as a leaf) and applies a given function to each leaf; it is rather simple to implement using the built-in `treerec` combinator. In our case, the tree is the program skeleton, its symbols are the leaves and the function to be applied is the `ifte`  expression. The `ifte`  expression checks whether a symbol matches the splicing pattern (`is-num-splice-pattern`). If it does, the `ifte`  expression converts it to a number (`splice-to-num`) and fetches the corresponding list item, otherwise, it leaves it as is. It's in the `is-num-splice-pattern` and `splice-to-num` functions that we apply our ability to treat symbols as text.

It is important to note that the `~X` patterns don't have any special significance in Joy; they are just valid identifiers. Trying to evaluate a piece of code that contains them without any replacement will probably result in an error, as they won't have any predefined meaning.

Because we are after a more convenient way to write functions, a more likely scenario is to splice values directly from the stack, so we have
```
splice-from-stack ==  swap [take-from-stack] dip splice-from-list;
```

where `take-from-stack` takes a fixed number of items from the stack and places them in a list. Now we can write
```
"two" "four" "five" [[1 ~0 3] [~1 ~2] concat] 3 splice-from-stack # => [[1 "two" 3] ["four" "five"] concat]
```
Note how the `"two" "four" "five"` items are on the stack and not in a list. In most cases, it may feel redundant to write the number of items to take from the stack, it is evident from the maximal value of `X` in the different `~X` patterns, so we define
```
splice-from-stack-max == [max-splice-num 1 +] nullary splice-from-stack;
```
And the final product:
```
splice == splice-from-stack-max i;
```

which actually evaluates the resulting program, as in
```
"two" "four" "five" [[1 ~0 3] [~1 ~2] concat] splice # => [1 "two" 3 "four" "five"]
```

Now we are ready for a first attempt at rewriting the `insert-at` function from the [previous post](/blog/2013-04-21-joyous-tree-friends.html) using our cool new metaprogramming techniques. First, let's recall the original function:

```
# inserts an item at a given position, deleting the previous item: list val index -> list
insert-at == 
	swapd dupd dup swapd
	take rollup
	1 + drop
	enconcat;
```

And here's the new version:
```
insert-at == [
	~1
	~0 ~2 take
	~0 ~2 1 + drop
	enconcat
] splice;
```

Success! We have no stack primitives visible in the code. But... I'm not quite satisfied with the fact that the function arguments don't have explicit names. You see, I have this issue, I like naming things: variables, functions, babies, you name it. I mean, I name it, that is, I will name it once you give me the thing. As Joy is devoid of either variables or babies, the only thing left to name is functions, and the only way to do this is to include them in a top level `DEFINE`, so we can't have function-local definitions (something along the lines of Lisp's `let` definitions). 

Splicing to the rescue. Instead of splicing from a list (or the stack), we can do the splicing from a map, like so:
```
[[four "four"] [two "two"] [five "f" "ive" concat]] 
[four  [1 two 3] [five 6 7] enconcat]
splice-from-map # => [1 "two" 3 "four" "f" "ive" concat 6 7]
```

The first nested list is treated as a map where each entry is another list. In each entry, the first symbol is treated as a key and the rest as the value. The second list is the program skeleton, where we replace every occurrence of a symbol that appears in the map with the value it is mapped to. The corresponding implementation:
```
splice-from-map == [ 
	[key-in-map] 
	[find-by-key] 
	[]
	ifte
] treemap-concat popd i;
```
which is quite similar to `splice-from-list`. Instead of looking for `~X` patterns, we look for items that appear in our map. Instead of fetching from a list, we fetch from a map. The last difference is that instead of mapping with `treemap` we use `treemap-concat`, which maps a function that takes a leaf and results in a list merged into the tree instead of the original leaf. The reason we need that is to be able to use multiple symbols as values in the map (like `"f" "ive" concat` in the example). The implementation of `treemap-concat` was a bit tricky to get right at 4 a.m., I'll leave the figuring out how it works as an exercise.

To slightly simplify the usage of `splice-from-map`, we'll allow to join the map and program skeleton into a single list, as in:
```
[[[plus +] 
  [square dup *]] 
  3 2 plus square		  
 ] let-map # => 25
```

The definition of `let-map`:
```
let-map ==  [first] [rest] cleave splice-from-map;
```

And now we have a simple implementation of local definitions. To make this more usable in the context of naming function arguments, we'll compose this with stack splicing:
```
let == splice-from-stack-max let-map;
```

Using `let` we can rewrite the `insert-at` function as:
```
insert-at == [
    [[list ~0] [val ~1] [index ~2]]
    	val
    	list index take
    	list index 1 + drop
    	enconcat
] let;
```

The combination of list and map splicing acts somewhat like named arguments in regular languages. It is definitely more explicit than the previous version, but I find it a bit clumsy to write. In simple cases where we only need items from the stack without any transformations, we can use this function:
```
let-splice == [first list-to-splice] [rest] cleave cons let;
```

Instead of taking a map like `let`, it takes a list of symbols and converts the list into a map where the symbols are the keywords and consecutive `~X` patterns are the values (`list-to-splice`). With this, we arrive at our final version of `insert-at`:
```
insert-at == [
    [list val index]
    	val
    	list index take
    	list index 1 + drop
    	enconcat
] let-splice;
```
The first line of the definition declares the arguments, saying: "I'll need three arguments from the stack, and I'll be using these names for them". `let-splice` does the magic of figuring out the mapping between the arguments and the values on the stack. This syntax is less flexible than `let`, as we can only name values from the stack and not any other expression. But I think it works well in this example, yielding the most readable code thus far.

As you may remember, but probably don't, this whole quest for stack manipulation cleansing started out with my wish to write a readable version of the `build-tree-with-value` function, which traverses a tree looking for a value and uses a pair of functions to handle success or failure. In pseudocode it looked like this:
```
build-tree-with-value == [
    [ [empty-tree] [empty-handler] ]
    [ [value =] [value-handler] ]
    
    [ [value <] [set-left-tree-for-recursion] [insert-new-left-tree] ]
    [           [set-right-tree-for-recursion] [insert-new-right-tree] ]
] condlinrec
```

And to remind you of the atrocity you had to go through last time, heeere's Johnny:
```
build-tree-with-value == rollup swap [
	[ [empty-tree] [rolldown dup 0 at rollupd i] ]
	[ [value =] [rolldown dup 1 at rollupd i] ]
		
	[ [value <] [dup left-tree rollupd] [swapd insert-left] ]
	[           [dup right-tree rollupd] [swapd insert-right] ]
] condlinrec popd
``` 

You can open your eyes now, I won't be doing that again. Can our new meta-power-tools help us alleviate the pain? It so happens that yes, they definitely can. Here's Johnny reformed:
```
build-tree-with-value == [ 
	[val empty-handler val-handler] [
		[ [empty-tree]  [val empty-handler i] ]
		[ [value val =] [val val-handler i] ]
		
		[ [value val >] [_left-tree] [insert-left] ]
		[           	[_right-tree] [insert-right] ]
] condlinrec] let-splice;
```

The original algorithm was slightly modified to make this more readable. Namely, the value being searched for is not passed around - it is wired into the skeleton of the code; this affects the signature of the handler functions, which is now `tree value -> tree`. It also inverts the comparison sign in the last predicate. The full new implementation can be found [here](https://github.com/ncreep/language_perils/blob/master/Joy/bin_tree/Trees2.joy). 

I actually wasn't expecting that much similarity to the pseudocode, I wrote it long before I had a readable version of `build-tree-with-value`. And what's more important is that we are using a generic solution, not something tailor-made for this particular problem. Another thing I quite like about this solution is how natural it was to build it in incremental steps: write a function, compose it with another one to refine it, rinse and repeat. That's a general property of Joy (and probably any other concatenative language), making it easy to write simple, bite-size pieces of code.

Now, one might expect me to go OCD on the rest of my binary tree implementation, and prune out as much of the remaining stack manipulation bits as possible, but I won't be doing that. No, seriously, not going to bother, I'm totally fine with how it is...

There are some reservations about my meta solution, though. First off, the implementation is far from being complete. The `let`/`splice` expressions cannot be properly nested in all cases, e.g.:
```
[[[a 2]] [[[a 3]] a 4 *] let] let # => 9
[[[a dup dup]] [[[a pop]] 4 a] let] let # => 4
```

And you can't make a definition and use it in the same map, so this is not valid:
```
[[[a dup] [b a pop]] 4 b] let
```

Bearing in mind that the whole implementation is ~70 LOC (no, that's not a leftover splicing pattern, and no, I'm not using a Joy-based templating engine), that's probably not so bad. Fixing these issues shouldn't be too complicated, but what we have should suffice as a proof of concept.

A completely different issue is performance related, though performance is of little significance to me in this case; it seems that using this kind of meta-programming really stresses out the GC. Running the new tree implementation on the usual Joy interpreter (the one you're likely to compile if you're fetching it from the [Joy site](http://www.kevinalbrecht.com/code/joy-mirror/joy.html), it has "NOBDW" in its title) crashes when trying to insert around 4 items. To circumvent the problem, I used the Joy interpreter compiled with the BDW GC (there's a special `make` file for that purpose). This fixes the issue, and you can easily insert more than 100 items in either implementation, though the meta-programming implementation is still considerably slower.

But the most important issue, in my opinion, is that it feels as if I'm trying to shoehorn my approach to programming into Joy's. In this whole exercise, I'm essentially trying to emulate named function arguments, which is one of the things that Joy seems to purposefully avoid. My feeling is that there must exist somewhere "The Joy Way (TM)", which would allow me to achieve the same level of readability without resorting to metaprogramming tricks. On the other hand, the fact that it was that simple to achieve this goal might be an indicator that maybe this approach was not an act of complete heresy. Any insight on this issue will be greatly appreciated.

Anyways, this concludes our excursion into the green lands of meta-trees. Stay tuned for the next time.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joyous Tree Friends]]></title>
    <link href="http://ncreep.github.io/language_perils/blog/2013-04-21-joyous-tree-friends.html"/>
    <updated>2013-04-21T18:15:00+03:00</updated>
    <id>http://ncreep.github.io/language_perils/blog/joyous-tree-friends</id>
    <content type="html"><![CDATA[Having introduced Joy in the [previous post](/blog/2013-03-18-the-joy-of-joy.html), as per our [grand scheme of things](/blog/2013-03-18-introduction.html), we are now ready for some coding.


As a first small project, I decided to try and implement a simple [binary search tree](http://en.wikipedia.org/wiki/Binary_search_tree). Nothing fancy, no self-balancing or anything [evil like that](http://j.rigelseven.com/read/67201/). Just your Plain Old Binary Search Tree (which can be handily abbreviated as POBST).

The reason for this boring textbook example is twofold. First, Joy being, for me, a rather new way of thinking about code, I didn't want to distract myself with something overly creative. Having a ready recipe for the thing I want to code provides me with a nice distraction-free, Joyful coding experience. Second, as Joy stresses function-level programming (no values and all that), I was wondering how a data structure, which I think of as a value, would look like in this paradigm.

<!-- more -->

(Source code for this post is in the [repository](https://github.com/ncreep/language_perils/blob/master/Joy/bin_tree/Trees.joy)).

First thing first, we need to have some representation of our tree. Now, we are quite far from our cozy OO land, mind you; we don't even have simple structs in Joy. So this is your typical "we're not in Kansas anymore" situation.  
The omnipresent lists to the rescue. As we remember (or not), lists in Joy are heterogeneous, so we can stuff anything in them, including other lists, which fits well with the recursive nature of trees.

So for our tree, we'll use a list with three elements - the first is the value, the second is the left subtree, and the third is the right subtree. All parts are optional. A couple of examples:

An empty tree
```
[]
```

A tree with a single node
```
[8 [] []]
```

And this tree 

<img class="center" src="/images/joy/simple_tree.png">

is

```
[8 [2 [1 [] []] [5 [] []]] [10 [] [12 [] []]]]
```

Untangled all the brackets? Great, we can move on.

In view of how simple the tree representation is, the second reason for implementing binary trees kind of evaporates, oh well...

The [full source code](https://github.com/ncreep/language_perils/blob/master/Joy/bin_tree/Trees.joy) should be documented enough to be, in most parts, fairly readable; so I won't be explaining it step by step here. The final result is rather boring, e.g., we can create and query a tree like this:
```
new-tree [4 8 6 1 3 6 4 3 4 9] add-all 3 tree-contains # => true
```
(Note that, due to what I think is a bug in the interpreter, when adding a large number of items at a time, say 100, sometimes the interpreter either crashes or gives unexpected errors.)

No surprises here. But there are some interesting implementation details that are actually worth a discussion; we are getting to them below.

Having implemented getters (in a moment, we'll see `value`, which extracts the value of a tree node), setters (as our trees are immutable, setters, or any mutating operations, actually produce new trees) and some predicates for the tree parts, I am getting to the interesting bits: adding and removing elements from the tree.

Adding an item to the tree is a simple recursive operation: traverse the tree till you find the right place, insert a new node with the value there. In case the item is already present, do nothing. Joy being Joy, we have a combinator that makes this possible without writing an explicitly recursive function. In this case, we use `condlinrec` (see [manual](http://www.kevinalbrecht.com/code/joy-mirror/html-manual.html)), which performs linear recursion, but unlike `linrec` it can check for multiple conditions before the recursion step or stopping.

A skeleton for the adding function looks like something like this:
```
add-val == [
    [ [empty-tree] [create-new-tree-with-the-value] ]
    [ [value =] [do-nothing] ]
    
    [ [value <] [set-left-tree-for-recursion] [insert-new-left-tree] ]
    [ [set-right-tree-for-recursion] [insert-new-right-tree] ]
] condlinrec
```

It's not that difficult to fill in the pseudocode bits, but we won't be doing that; instead, let's see what the deleting function should look like. In pseudocode:
```
delete-val == [
    [ [empty-tree] [do-nothing] ]
    [ [value =] [create-a-new-tree-without-the-value] ]
    
    [ [value <] [set-left-tree-for-recursion] [insert-new-left-tree] ]
    [ [set-right-tree-for-recursion] [insert-new-right-tree] ]
] condlinrec
```

Hmm, rather similar, in both cases we are rebuilding the tree according to some value; the differences occur when we actually get to the value or when it's missing. Being conscientious programmers, we cannot let this code duplication be. The code must be WET (which is like DRY, but more suitable for trees), and we must find a way to hydrate it. 

Simple enough, this is a functional language; we can pass the appropriate handler functions as parameters and let them take care of the differences, while keeping common code intact:
```
build-tree-with-value == [
    [ [empty-tree] [empty-handler] ]
    [ [value =] [value-handler] ]
    
    [ [value <] [set-left-tree-for-recursion] [insert-new-left-tree] ]
    [ [set-right-tree-for-recursion] [insert-new-right-tree] ]
] condlinrec

add-val == [[do-nothing] [create-new-tree-with-the-value]] build-tree-with-value
delete-val == [[create-a-new-tree-without-the-value] [do-nothing]] build-tree-with-value
```

Great, we got ourselves WET with Joy, done; we can now move on to greener pastures.  
Well, of course not, that was just pseudocode, we actually need an implementation for this thing. And here it is:
```
build-tree-with-value == rollup swap [
	[ [empty-tree] [rolldown dup 0 at rollupd i] ]
	[ [value =] [rolldown dup 1 at rollupd i] ]
		
	[ [value <] [dup left-tree rollupd] [swapd insert-left] ]
	[ [dup right-tree rollupd] [swapd insert-right] ]
] condlinrec popd

add-val == [[pop [[] []] cons] [popd]] build-tree-with-value
delete-val == [[popd] [popd delete-tree]] build-tree-with-value
```
Bugger me - I can't quite read this, and I wrote that not that long ago.  
So why is it so complicated? In the pseudocode above, I elided any references to argument handling; I just assumed the arguments to be there when needed. That's quite natural for someone coming from a background of [value-level](http://en.wikipedia.org/wiki/Value-level_programming) programming languages. When you write a function, e.g., in Java, arguments to functions are just there, available, without any fuss, by their name. Not so when you're dealing with a stack-based language; here, the arguments are implied to be on the stack, and they have no names. To be able to use them, you have to make sure that they are properly ordered on the top of the stack.

Back to our code. First, we have the easy bits; `add-val` and `delete-val` are actually quite similar to our pseudocode. They assume that a tree and a value to be added/removed are on top of the stack, each of them pushes their pair of handling functions onto the top of the stack, and passes control to `build-tree-with-value`.  
The handler functions are rather simple; to figure them out, we need to remember that when we apply them we have the tree on the top of the stack and the value below it. After the application, we need to leave only the new tree and nothing else. I'll leave the figuring out as an exercise to the reader (oh how I hate when people do that. At last, the oh so sweet revenge...).

Now, `build-tree-with-value` creates a function that takes three arguments: a tree, a value, and a list with a pair of handler functions; in that order, i.e. the handler functions are on the top of the stack. But we don't want them that way, what we need is: handlers, value, tree. That's what the first `rollup swap` functions do. After applying them, we are ready for the recursion. And that's the last point where I can still explain the code without taking out a piece of paper and drawing many little stacks on it. As you can see, each condition is followed by a bunch of stack-manipulating functions, the whole purpose of which is to tweak the stack so that the arguments are in the right order, multiplicity and are ready for the further recursive calls. A horrid, horrid piece of code.

I would love to give the explanation of this code to you, the reader, as another exercise, but that would be just plain sadistic. And I won't be bothered to explain it myself, that would be way too tedious, boring and quite meaningless. Why meaningless? Because by now, I think that it's pretty clear that we are doing something wrong. To quote a [comment](http://www.codecommit.com/blog/cat/the-joy-of-concatenative-languages-part-1#comment-4407) from the [The Joy of Concatenative Languages](http://www.codecommit.com/blog/cat/the-joy-of-concatenative-languages-part-1) series
>If you find you need to be continually aware of the stack, then, plain and simple, "You're Doing It Wrong."

We need to step back and see how we can alleviate the stack manipulation problem. To do that, we'll examine a simpler case: the `insert-at` function. This function takes a list, a value and an index, and inserts the value at the specified position in the list. The algorithm we'll be implementing is:

* take the first N - 1 items from the list (prefix)
* take the tail of list starting from the N + 1th item (tail)
* concatenate the prefix value and tail.

Simple enough, especially as we already have the `take`, `drop` and `enconcat` functions implemented for us. And here's my first naive attempt at an implementation:
```
insert-at == 
	swapd dupd dup swapd
	take rollup
	1 + drop
	enconcat;
```
Not the horrors of `build-tree-with-value`, but still far from satisfactory; we cannot, by any means, plead ignorance of the stack.  
For the sport of it, let's try to follow the definition. 

* We start out with `list val index` (the rightmost item is the top of the stack). 
* The first line rearranges it, so that we have `val list index list index`. 
* The second line applies the `take` function to the top two items and pushes the result down the stack, so we have `val prefix list index`.
* The third line calculates the tail of the list, leaving `val prefix tail`.
* The last line performs the concatenation of all three items on the stack, and we are done.

Now, our aim is to reduce the amount of stack related operations we see at each stage. To do this, I tried looking at the different functions and combinators available in Joy. But being a novice, I couldn't find anything simple that makes the code much better. What I managed to figure out is that part of the complexity stems from the fact that in order to reuse an argument, I have to duplicate it on the stack, which requires even more manipulation of the stack. One of the combinators that I found, `nullary`, allows to use a function without removing its arguments from the stack, so one can avoid the duplication in that case. Here's the best that I managed:
```
insert-at == 
	swapd 
	[take] nullary rollup
	1 + drop
	enconcat;
```
The steps are as follows:

* `list val index` -> `val list index`
* `val list index` -> `val list index prefix` -> `val prefix list index`
* `val prefix list index` -> `val prefix tail`
* Concatenating the last three items.

A definite improvement, but I still don't see it as a satisfactory result. The second line seems rather cryptic to me. Further investigation in this direction did not yield anything better, so I decided to leave it at that. 

If there are any Joy or concatenative gurus reading this, I would love to hear your opinion on how this code can be improved.

After abandoning this direction, I had another idea. I will leave it till the next post in the series. But the upshot of it is that I was able to write the following code:
```
insert-at == [
	~1
	~0 ~2 take
	~0 ~2 1 + drop
	enconcat
] 3 splice-from-stack;
```
Ignoring the surrounding `splice-from-stack` call, we've managed to remove all stack related manipulation. The cost, so it seems, is that we introduced something that looks like custom syntax.

[To be continued](/blog/2013-05-24-meta-joy.html)...
]]></content>
  </entry>
  
</feed>
