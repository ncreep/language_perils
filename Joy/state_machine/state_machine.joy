"../meta_joy/meta.joy" include.
DEFINE 

(* 
A state is a 2 items list, where the first item is the value, 
the second is a transition function.
The state transition function takes a pair of stack and current value, and produces a new stack and state:
[stack value] -> new-stack new-state

States are run using the 'run-state' function. See 'baby_state_machine.joy' for an example.
*)

# fetch the state value
state-value == 0 at;

# fetch the transition function
next-state == 1 at;

# moves the first element from one list into a list pair with the second argument: [x rest] y -> [rest] [y x]
move-first == swap 
	[null] [swap [] cons] 
	[[rest] [first] cleave swapd [] cons cons] 
	ifte;

(* 
Checks whether the state run is done, this is true if the input is done.
input stack state -> boolean
*)
finish-state-run == pop pop null;

# runs a state against an input list: input state stack -> final-state-value
run-state-from-stack == 
  swap # arguments are now: input stack state
  [finish-state-run] [popd popd state-value] [
    [move-first] dip
    next-state i # input [stack value] -> input new-stack new-state
  ] tailrec;

# runs a state from an input list and an empty stack: input state -> final state value
run-state == [] run-state-from-stack;

# manipulation of [stack value] pairs
cur-stack == 0 at;
input == 1 at;

# a boolean that checks that the input equals to the current top value: A -> boolean
input-is == [input] dip =;

# applies a function to the top of the stack and returns a new stack: [stack value] func -> new-stack
on-stack  == swap cur-stack uncons [swap i] dip cons;

# same as cond, but without the default value
condn == [[]] concat cond;

.