"../meta_joy/meta.joy" include.
DEFINE 

state-value == 0 at;
is-final-state == 1 at;
next-state == 2 at;

# moves the first element from one list into a list pair with the second: [x rest] ls -> [rest] [ls x]
move-first == swap 
	[null] [swap [] cons] 
	[[rest] [first] cleave swapd [] cons cons] 
	ifte;
#move-first == swap [rest] [first] cleave swapd swons;

# runs a state against an input list: input stack state -> final-state-value
(*
run-state-from-stack == [is-final-state] [state-value] [
	[[input stack state]
		stack state
		[input null] [next-state-no-input] [next-state-with-input] ifte
		infra
		[rest] [first] cleave
	] let-splice;
] tailrec;
*)
 
run-state-from-stack == [is-final-state] [popd popd state-value] [
	[move-first] dip
	next-state i # input [stack value] -> input new-stack new-state
] tailrec;

(* *)
# runs a state from an input list and an empty stack: input state -> final state value
run-state == [] swap run-state-from-stack;

# manipulation of [stack value] pairs
has-input == size 2 =;
no-input == size 1 =; 
cur-stack == 0 at;
input == 1 at;
input-or-default == [has-input] [input] [[]] ifte;
empty-stack == cur-stack null;
# updates the current stack value with the given function: [stack value] [f] -> [stack f value]
update-stack == [dup cur-stack] dip app1 swap rest cons;
# checks whether the main stack is empty
no-stack == stack null;

stack-value-to-map == [[stack-value]
	[[has-input stack-value has-input]
	 [no-input stack-value no-input]
	 [input stack-value input-or-default]]
] let-splice;

state-func == 
	[[cur-stack] [stack-value-to-map] cleave] dip 
	splice-from-map-no-eval infra
	[rest] [first] cleave;

fail == ["fail" true];
success == ["success" true];
zero == ["zero" false [zero-next]];
one == ["one" false [one-next]];
no-input-state == ["no input" false [no-input-next]];

no-input-next == [[no-stack] [success] [fail] ifte] state-func;

zero-next == [[
	[[no-input] no-input-state]
	[[input '0 =] input zero]
	[one]
] cond] state-func;

one-next == [
	[no-stack] [fail] 
	[pop 
	 [[[no-input] no-input-state]
	  [[input '1 =] one]
	  [fail]
	] cond] 
ifte] state-func;

(*
no-input-next == [empty-stack] [cur-stack success] [cur-stack fail] ifte;

zero-next == [
	[[no-input] cur-stack no-input-state]
	[[input '0 =] [input] [cur-stack] cleave cons zero]
	[cur-stack one]
] cond;

one-next == 
	[empty-stack] 
	[cur-stack fail] 
	[[rest] update-stack 
	 [
		[[no-input] cur-stack no-input-state]
		[[input '1 =] cur-stack one]
		[cur-stack fail]
	] cond] 
ifte;
*)
.