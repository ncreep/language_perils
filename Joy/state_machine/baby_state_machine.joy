"state_machine.joy" include.

(* 
A state machine that describes the behavior of babies. 

Example usage:

["soothe" "feed" "sing-lullaby" "feed"] sleepy run-baby-state.
*)
DEFINE 

# runs the state of a baby, initializing the mistakes count to 0: input state -> final state value
run-baby-state == [0] run-state-from-stack;

# the maximal number of mistakes a parent is allowed to have
max-mistakes == 3;

# incrementing/decrementing the number of parent mistakes
wrong == [succ] on-stack;
right == [pred] on-stack;

# the baby decides whether he/she needs to call a social worker
should-call-social-worker == 
  [cur-stack first max-fail >=] 
  [cur-stack call-social-worker] 
  [wrong crying] ifte;
  
sleepy == ["sleepy" [[
  [["sing-lullaby" input-is] right asleep]
  [["feed" input-is] wrong crying]
  [["soothe" input-is] wrong crying]
] condn]];
  
hungry == ["hungry" [[
  [["sing-lullaby" input-is] wrong crying]
  [["feed" input-is] right asleep]
  [["soothe" input-is] wrong crying]
] condn]];
  
asleep == ["asleep" [[
  [["sing-lullaby" input-is] wrong crying]
  [["feed" input-is] wrong crying]
  [["soothe" input-is] wrong crying]
] condn]];
  
crying == ["crying" [[
  [["sing-lullaby" input-is] should-call-social-worker]
  [["feed" input-is] should-call-social-worker]
  [["soothe" input-is] right asleep]
] condn]];

call-social-worker == ["call-social-worker" [[
  [["sing-lullaby" input-is] cur-stack call-social-worker]
  [["feed" input-is] cur-stack call-social-worker]
  [["soothe" input-is] cur-stack call-social-worker]
] condn]];

.